.sign_up
  - url = @user.new_record? ? user_registration_path : update_user_path(@user)
  - method = @user.new_record? ? :post : :update
  = simple_form_for @user, :url => url, :method => method, :remote => true, :validate => true do |f|
    - heading = @user.new_record? ? 'Join' : 'Edit'
    - profile_picture = @user && @user.picture? ? @user.picture.url(:profile) : '/images/profile.png'
    #join_popup_div
      %ul{:style => 'display:none'}
        %li
          %a{:href => '#step1'} Step 1
        %li
          %a{:href => '#step2'} Step 2
        %li
          %a{:href => '#step3'} Step 3
        %li
          %a{:href => '#step4'} Step 4
      #step1.join_popup
        .top_curve_join
        .clear
        .join_repeat
          .content_join
            .close
              = image_tag('lock_icon.png', :class => 'lock_icon')
              = heading
              %small= link_to image_tag('icons/close.gif'), '#', :class => 'close_button'
              %span.clear

              #left_180
                - if @user.new_record?
                  %p
                    Sign up using
                - else
                  %p
                    Email address
                #email_and_address
                  .inputfields= f.input :email, :input_html => { :size => 14 }
                  - if !oauth_signup?
                    .inputfields= f.input :password, :input_html => { :size => 14 }
                    = f.input :password_confirmation, :as => :hidden
                  #terms_and_email
                    - if @user.new_record?
                      = f.input :terms_accepted, :label => "I accept the #{link_to 'terms', page_path(Page.find_by_short_title('terms'))}"
                    - else
                      = f.input :terms_accepted, :as => :hidden
                    = f.input :emails_accepted, :label => 'Email me Koblo news and stuff'

                - if @user.new_record?
                  #sign_in_link
                    Or
                    = link_to 'sign in', new_user_session_path(:stay_on_page => params[:stay_on_page], :message_after_login => params[:message_after_login])
              #right_200
                - if !oauth_signup?
                  - if @user.new_record?
                    %p Or sign up using
                  - else
                    %p Connect your Koblo account to
                  .provider
                    - if @user.connected_to_facebook?
                      = image_tag('facebook_16.png')
                      Facebook (connected)
                    - else
                      = link_to image_tag('facebook_16.png'), user_omniauth_authorize_path(:facebook), :class => 'loader_link'
                      = link_to 'Facebook', user_omniauth_authorize_path(:facebook), :class => 'loader_link'
                  .provider
                    - if @user.connected_to_twitter?
                      = image_tag('twitter_16.png')
                      Twitter (connected)
                    - else
                      = link_to image_tag('twitter_16.png'), user_omniauth_authorize_path(:twitter), :class => 'loader_link'
                      = link_to 'Twitter', user_omniauth_authorize_path(:twitter), :class => 'loader_link'
                .nav_buttons
                  = image_submit_tag('next_btn.png', :id => 'step_1_next_button', :class => 'next_button')
        .clear
        .bottom_curve_join

      #step2.join_popup
        .top_curve_join
        .clear
        .join_repeat
          #upload_profile_picture
            = image_tag('upload_btn.png')
          .content_join
            .close
              = image_tag('lock_icon.png', :class => 'lock_icon')
              = heading
              %small= link_to image_tag('icons/close.gif'), '#', :class => 'close_button'
              %span.clear

              #left_180
                = image_tag profile_picture, :class => 'profile_picture', :size => "160x160"
              #right_200
                #name_and_email
                  .inputfields= f.input :name
                = f.input :user_type_id, :as => :radio, :collection => UserType.all, :label => "I'm a"
                = f.input :record_label_id, :collection => RecordLabel.order(:name.asc), :label => "I'm associated with record label", :label_html => { :id => 'record_label_label' }
                .clear
                or enter record label name
                = text_field_tag :record_label_name
                .nav_buttons
                  = image_submit_tag('back_btn.png', :id => 'step_2_back_button') if !oauth_signup?
                  = image_submit_tag('next_btn.png', :id => 'step_2_next_button', :class => 'next_button')
        .clear
        .bottom_curve_join

      #step3.join_popup
        .top_curve_join
        .clear
        .join_repeat
          .content_join
            .close
              = image_tag('lock_icon.png', :class => 'lock_icon')
              = heading
              %small= link_to image_tag('icons/close.gif'), '#', :class => 'close_button'
              %span.clear
              #left_180
                .inputfields#about_me= f.input :description, :label => 'About me', :label_html => { :id => 'about_me_label' }
                .clear
              #right_200
                .inputfields= f.input :website, :label => 'Website', :input_html => { :size => 19 }
                .clear
                
                .error_canvas{ :style => "display: none" }
                .nav_buttons
                  = image_submit_tag('back_btn.png', :id => 'step_3_back_button')
                  - if @user.new_record? || !show_bank_transfer_information?(@user)
                    = image_submit_tag('finish_btn.png', :class => 'finish_button')
                  - else
                    = image_submit_tag('next_btn.png', :id => 'step_3_next_button', :class => 'next_button')
        .clear
        .bottom_curve_join

      - if show_bank_transfer_information?(@user)
        #step4.join_popup
          .top_curve_join
          .clear
          .join_repeat
            .content_join
              .close#bank_transfer_information
                = image_tag('lock_icon.png', :class => 'lock_icon')
                = heading
                %small= link_to image_tag('icons/close.gif'), '#', :class => 'close_button'
                %span.clear
                - resource.build_bank_transfer_information unless resource.bank_transfer_information
                = f.simple_fields_for :bank_transfer_information do |bti_form|
                  #left_180
                    = bti_form.input :user_id, as: :hidden, input_html: { value: @user.id }
                    = bti_form.input :name, :label => 'Name of Account Owner'
                    = bti_form.input :iban, :label => 'IBAN'
                    = bti_form.input :swift, :label => 'SWIFT', :validate => false
                    = bti_form.input :intermediary_bank, :label => 'Intermediary Bank'
                    = bti_form.input :bank_name, :label => 'Name of Bank'
                    = bti_form.input :bank_address1, :label => 'Bank Address 1'
                    = bti_form.input :bank_address2, :label => 'Bank Address 2'
                    = bti_form.input :bank_country, :label => 'Country'
                    //= bti_form.input :bank_code
                    .clear
                  #right_200
                    = bti_form.input :paypal_email
                    .clear
                    .nav_buttons
                      = image_submit_tag('back_btn.png', :id => 'step_4_back_button')
                      = image_submit_tag('finish_btn.png', :class => 'finish_button')
                    .spinner{ :style => "display: none" }= image_tag "loader.gif"
                    .clear
                    .error_canvas{ :style => "display: none" }
          .clear
          .bottom_curve_join

  :javascript
    var uploader = null;
    var rejectedFiles = [];

    initUploader = function () {
      uploader = new plupload.Uploader({
        runtimes : "html5,flash,html4",
        browse_button : 'upload_profile_picture',
        max_file_size : '10mb',
        url : "#{pictures_path}",
        flash_swf_url: "/javascripts/plupload/plupload.flash.swf",
        multipart: true,
        multipart_params: {
          'format'             : 'js',
          'authenticity_token' : '#{form_authenticity_token}',
          "_koblo2_session"    : encodeURIComponent('#{cookies["_koblo2_session"]}'),
        },
        init: {
          QueueChanged:   function() {
            uploader.start()
          },

          UploadProgress: function(up, file) {
            if (file.percent == 100) {
              $('#upload_profile_picture').html('Processing... #{image_tag("loader.gif")}').after('#{link_to(image_tag("delete_connection.png"), "#", :class => "cancel_upload")}');
            } else {
              $("#upload_profile_picture").html(file.percent + '%');
              if ($('.cancel_upload').size() == 0) {
                $("#upload_profile_picture").after('#{link_to(image_tag("delete_connection.png"), "#", :class => "cancel_upload")}');
              }
            }
          },

          FileUploaded: function(up, file, info) {
            if ($.inArray(file.id, rejectedFiles) == -1) {
              eval(info.response);
            }
            $('.cancel_upload').remove();
            $("#upload_profile_picture").html('#{escape_javascript(image_tag("upload_btn.png"))}');
          },

          Error: function(up, error) {
            $('.cancel_upload').remove();
            $('#upload_profile_picture').fadeTo(400, 0, function() { $(this).html('<div class="error_uploading">Unable to process image file</div>').fadeTo(400, 1).delay(2000).fadeTo(400, 0, function() { $(this).html('#{escape_javascript(image_tag("upload_btn.png"))}').fadeTo(400, 1) }) });
          }
        }
        });

      uploader.init();
    }

    showSpinner = function() {
      $(".spinner").show();
    }

    hideSpinner = function() {
      $(".spinner").hide();
    }

    fadeDownFinishButton = function() {
      $(".finish_button").fadeTo(400, 0.2);
    }

    fadeInFinishButton = function() {
      $(".finish_button").fadeTo(400, 1);
    }

    disableFinishButton = function() {
      fadeDownFinishButton();
      $(".finish_button").attr("disabled", "true");
    }

    enableFinishButton = function() {
      fadeInFinishButton();
      $(".finish_button").removeAttr("disabled");
    }

    showError = function(txt) {
      $(".error_canvas").text(txt);
      $(".error_canvas").fadeIn(400);
    }

    hideError = function() {
      $(".error_canvas").hide();
    }

    $(document).ready(function() {
      initUploader();
      $('#join_popup_div').tabs();
      $('#step_1_next_button').live('click', function () {
        $('#join_popup_div').tabs('select', 1);
        uploader.refresh();
        return false;
      });
      $('#step_2_next_button').live('click', function () {
        // Why is this here?
        //if ($("#upload_profile_picture").html().indexOf('#{image_tag("upload_btn.png").gsub(" />", ">")}') >= 0) {
          $('#join_popup_div').tabs('select', 2);
        //} else {
          $('#upload_profile_picture').effect('highlight', {}, 1000);
        //}
        return false;
      });

      $('#step_2_back_button').live('click', function () {
        $('#join_popup_div').tabs('select', 0);
        return false;
      });
      $('#step_3_next_button').live('click', function () {
        $('#join_popup_div').tabs('select', 3);
        return false;
      });
      $('#step_3_back_button').live('click', function () {
        $('#join_popup_div').tabs('select', 1);
        uploader.refresh();
        return false;
      });
      $('#step_4_back_button').live('click', function () {
        $('#join_popup_div').tabs('select', 2);
        return false;
      });

      $('.close_button').live('click', function() {
        self.parent.Shadowbox.close();
      });

      var anchor = window.location.href.split('#')[1];
      if (typeof anchor != "undefined" && anchor != '') {
        $('#join_popup_div').tabs('select', anchor);
        uploader.refresh();
      } else {
        if (#{oauth_signup?.to_s}) {
          $('#join_popup_div').tabs('select', 0)
        };
      };

      $('.cancel_upload').live('click', function() {
        var file = uploader.files[uploader.files.length - 1];
        rejectedFiles.push(file.id);
        uploader.stop();
        uploader.removeFile(file);
        $('.cancel_upload').remove();
        $("#upload_profile_picture").html('#{escape_javascript(image_tag("upload_btn.png"))}');
        return false;
      });

      clientSideValidations.callbacks.element.before = function(element, callback) {
        // Hack to not receive complaints from the client side validations stuff
        $('#user_password_confirmation').val($('#user_password').val());
      }

      $('.next_button, .finish_button').click(function() {

        // Any required fields not filled in?
        emptyRequiredFields = $(this).parents('.join_popup').find('input.required').filter(function() { return this.value == ""; });
        valid = emptyRequiredFields.size() == 0;
        if (!valid) {
          emptyRequiredFields[0].focus();
        } else {

          // Validate remaining fields
          firstInvalid = null;
          $('[data-validate]:input:visible').each(function() {
            var settings = window[this.form.id];
            if (!$(this).isValid(settings.validators)) {
              valid = false;
              if (firstInvalid == null) {
                firstInvalid = this;
              }
            }
          });

          if (!valid) {
            $(firstInvalid).focus();
          }
        }

        return valid;
      });

      // We need to load the page that redirects to Twitter/Facebook in the main browser window
      $(".provider a").click(function() {
        getTopLevelWindow().location = $(this).attr('href');
        return false;
      });

      $('form.user').bind("ajax:success", function(evt, data, status, xhr) {
        eval(xhr.responseText);
      });

      $('form.user').submit(function() {
        hideError();
        showSpinner();
        disableFinishButton();
      });
    });
